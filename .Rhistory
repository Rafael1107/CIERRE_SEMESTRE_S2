str(acuerdos)  #El objeto acuerdo que obtuvimos es uno de tipo character, con 32937 elementos.
diez <- rep(1:ceiling(length(acuerdos)/10), each = 10)
# Empecemos con el texto 1
acuerdos<-read_lines("articulo1.txt")
acuerdos <- read_lines("acuerdo final.txt", skip = 566, n_max = 33503-566 ) #leyendo el documento 49836-0.txt desde la linea 419 hasta la linea 8313
# Empecemos con el texto 1
rm(list=ls())
acuerdos<-read_lines("articulo1.txt")
acuerdos <- read_lines("acuerdo final.txt", skip = 566, n_max = 33503-566 ) #leyendo el documento 49836-0.txt desde la linea 419 hasta la linea 8313
str(acuerdos)  #El objeto acuerdo que obtuvimos es uno de tipo character, con 32937 elementos.
diez <- rep(1:ceiling(length(acuerdos)/10), each = 10)
diez <- diez[1:length(acuerdos)]
#Combinamos diez con now_raw y los asignamos al objeto nov_text. Así tenemos una columna con los renglones de texto y otra con un número que identifica a qué grupo de diez renglones pertenece.
#Además, convertimos a data.frame para que las columnas estén identificadas con un nombre, lo cual será útil en los siguientes pasos.
nov_text <- cbind(diez, acuerdos) %>% data.frame()
#Usamos aggregate para concatenar los renglones (FUN = paste, con collapse = " " para preservar el espacio entre palabras), agrupados por diez (formula = nov_raw ~ diez).
nov_text <- aggregate(formula = acuerdos ~ diez,
data = nov_text,
FUN = paste,
collapse = " ")
#Como sólo necesitamos la columna con los ahora párrafos de texto, con eso nos quedamos. Aprovechamos para transformar nov_text en una matrix, pues esto nos facilitará los pasos siguientes.
nov_text <- nov_text %>% select(acuerdos) %>% as.matrix
dim(nov_text)
nov_text <- gsub("[[:cntrl:]]", " ", nov_text)
nov_text <- tolower(nov_text) #convirtiendo todo a minusculas
nov_text <- removeWords(nov_text, words = stopwords("spanish")) #eliminar palabras vacias, tales como algunas preposiciones y muletillas.
nov_text <- removePunctuation(nov_text) #se  deshace de la puntuación, puesto que fin y fin. son identificadas como palabras diferentes, lo cual no deseamos.
nov_text <- removeNumbers(nov_text) #En este caso, removemos los números, pues en Niebla no hay fechas y otras cantidades que deseemos conservar.
nov_text <- stripWhitespace(nov_text) #Por último eliminamos los espacios vacios excesivos, muchos de ellos introducidos por las transformaciones anteriores.
acuerdos<-read_lines("articulo1.txt")
acuerdos<-read_lines("articulo1.txt")
#leyendo el documento 49836-0.txt desde la linea 419 hasta la linea 8313
str(acuerdos)  #El objeto acuerdo que obtuvimos es uno de tipo character, con 32937 elementos.
diez <- rep(1:ceiling(length(acuerdos)/10), each = 10)
diez <- diez[1:length(acuerdos)]
#Combinamos diez con now_raw y los asignamos al objeto nov_text. Así tenemos una columna con los renglones de texto y otra con un número que identifica a qué grupo de diez renglones pertenece.
#Además, convertimos a data.frame para que las columnas estén identificadas con un nombre, lo cual será útil en los siguientes pasos.
nov_text <- cbind(diez, acuerdos) %>% data.frame()
#Usamos aggregate para concatenar los renglones (FUN = paste, con collapse = " " para preservar el espacio entre palabras), agrupados por diez (formula = nov_raw ~ diez).
nov_text <- aggregate(formula = acuerdos ~ diez,
data = nov_text,
FUN = paste,
collapse = " ")
#Como sólo necesitamos la columna con los ahora párrafos de texto, con eso nos quedamos. Aprovechamos para transformar nov_text en una matrix, pues esto nos facilitará los pasos siguientes.
nov_text <- nov_text %>% select(acuerdos) %>% as.matrix
dim(nov_text)
nov_text <- gsub("[[:cntrl:]]", " ", nov_text)
nov_text <- tolower(nov_text) #convirtiendo todo a minusculas
nov_text <- removeWords(nov_text, words = stopwords("spanish")) #eliminar palabras vacias, tales como algunas preposiciones y muletillas.
nov_text <- removePunctuation(nov_text) #se  deshace de la puntuación, puesto que fin y fin. son identificadas como palabras diferentes, lo cual no deseamos.
nov_text <- removeNumbers(nov_text) #En este caso, removemos los números, pues en Niebla no hay fechas y otras cantidades que deseemos conservar.
nov_text <- stripWhitespace(nov_text) #Por último eliminamos los espacios vacios excesivos, muchos de ellos introducidos por las transformaciones anteriores.
library(tm)
library(wordcloud)
# Empecemos con el texto 1
rm(list=ls())
# Empecemos con el texto 1
texto1<-read_lines("articulo1.txt")
texto1<-tm_map(texto1,tolower)
# Empecemos con el texto 1
texto1<-read_lines(as.character("articulo1.txt"))
texto1<-tm_map(texto1,tolower)
# Empecemos con el texto 1
texto1<-read_lines(as.character("articulo1.txt"))
texto1<-tm_map(texto1,tolower)
# Empecemos con el texto 1
texto1<-read_lines("articulo1.txt")
texto1<-tm_map(texto1,tolower)
texto1
inspect(texto1)
texto1<-tm_map(texto1,tolower)
inspect(texto1)
# Empecemos con el texto 1
texto1<-read_lines(as.double("articulo1.txt"))
# Empecemos con el texto 1
texto1<-read_lines(as.string("articulo1.txt"))
# Empecemos con el texto 1
texto1<-read_lines(as.String("articulo1.txt"))
texto1<-tm_map(texto1,tolower)
inspect(texto1)
textos=Vcorpus(DirSource("Textos"),Encoding="UTF-8",readercontrol=list(language=spa))
textos=VCorpus(DirSource("Textos"),Encoding="UTF-8",readercontrol=list(language=spa))
textos=VCorpus(DirSource("Textos"),encoding="UTF-8",readercontrol=list(language=spa))
textos=VCorpus(DirSource("Textos"),encoding="UTF-8"),readercontrol=list(language=spa)
textos=VCorpus(DirSource("Textos",encoding="UTF-8"),readercontrol=list(language=spa))
textos=VCorpus(DirSource("Textos",encoding="UTF-8"),readerControl =list(language="spa"))
View(textos)
inspect(textos)
writeLines(as.character(textos[[1]]))
writeLines(as.character(textos[[2]]))
#Arreglando los textos
textos=tm_map(textos,tolower)
textos
#Eliminando signos de puntuacion
textos=tm_map(textos,removePunctuation)
#Eliminando conectores
textos=tm_map(textos,removeWords,stopwords("spanish"))
writeLines(as.character(textos[[1]]))
#Eliminar los especios
textos=tm_map(textos,stripWhitespace)
writeLines(as.character(textos[[1]]))
texto_matrix=as.matrix.data.frame(textos)
texto_matrix=as.matrix(textos)
texto_matrix=as.matrix(textos[[1]])
View(texto_matrix)
#Eliminando Numeros
textos=tm_map(textos,removeNumbers)
writeLines(as.character(textos[[1]]))
View(texto_matrix)
View(textos)
#Colocando en formato de tabla
textos=tm_map(textos,PlainTextDocument)
writeLines(as.character(textos[[1]]))
mat_texto1=texto[[1]]
mat_texto1=as.matrix(texto[[1]])
mat_texto1=as.matrix(textos[[1]])
View(mat_texto1)
mat_texto1
textos[[1]]
mat_texto1<-as.matrix(textos[[1]])
mat_texto1
View(mat_texto1)
#Colocando en formato de tabla
rm(list=ls())
#Reconocimiento de Archivos
textos=VCorpus(DirSource("Textos",encoding="UTF-8"),readerControl =list(language="spa"))
inspect(textos)
writeLines(as.character(textos[[1]]))
writeLines(as.character(textos[[2]]))
#Arreglando los textos
textos=tm_map(textos,tolower)
#Eliminando signos de puntuacion
textos=tm_map(textos,removePunctuation)
#Eliminando conectores
textos=tm_map(textos,removeWords,stopwords("spanish"))
#Eliminar los especios
textos=tm_map(textos,stripWhitespace)
#Eliminando Numeros
textos=tm_map(textos,removeNumbers)
#Colocando en formato de tabla
#Colocando en formato de tabla
Matriz1<-TermDocumentMatrix(textos[[1]])
#Colocando en formato de tabla
Matriz1<-TermDocumentMatrix(textos)
Matriz1<-TermDocumentMatrix(as.vector(textos[[1]]))
writeLines(as.character(textos[[1]]))
texto1<-writeLines(as.character(textos[[1]]))
texto2<-writeLines(as.character(textos[[2]]))
texto1<-writeLines((textos[[1]]))
texto2<-writeLines((textos[[2]]))
Matrix1<-TermDocumentMatrix(textos)
writeLines(as.character(textos[[1]]))
#
textos=gsub("[[:cntrl:]]", " ", textos)
writeLines(as.character(textos[[1]]))
writeLines(as.character(textos[[2]]))
rm(list=ls())
#Reconocimiento de Archivos
textos=VCorpus(DirSource("Textos",encoding="UTF-8"),readerControl =list(language="spa"))
inspect(textos)
writeLines(as.character(textos[[1]]))
writeLines(as.character(textos[[2]]))
#Arreglando los textos
textos=tm_map(textos,tolower)
#Eliminando signos de puntuacion
textos=tm_map(textos,removePunctuation)
#Eliminando conectores
textos=tm_map(textos,removeWords,stopwords("spanish"))
#Eliminar los especios
textos=tm_map(textos,stripWhitespace)
#Eliminando Numeros
textos=tm_map(textos,removeNumbers)
Matrix1<-TermDocumentMatrix(textos)
Matrix1<-TermDocumentMatrix(as.matrix(textos))
Matrix1<-TermDocumentMatrix(as.matrix(textos[[1]]))
as.matrix(textos[[1]])
textos[[1]]
textos[[1]]
textos[[1]]
writeLines(as.character(textos[[1]]))
writeLines(as.character(textos[[2]]))
#Eliminando Numeros
textos=tm_map(textos,removeNumbers)
writeLines(as.character(textos[[1]]))
writeLines(as.character(textos[[2]]))
textos <- gsub("[[:cntrl:]]", " ", textos[[1]])
textos
writeLines(as.character(textos[[1]]))
writeLines(as.character(textos[[2]]))
#Reconocimiento de Archivos
textos=VCorpus(DirSource("Textos",encoding="UTF-8"),readerControl =list(language="spa"))
inspect(textos)
writeLines(as.character(textos[[1]]))
writeLines(as.character(textos[[2]]))
#Arreglando los textos
textos=tm_map(textos,tolower)
#Eliminando signos de puntuacion
textos=tm_map(textos,removePunctuation)
#Eliminando conectores
textos=tm_map(textos,removeWords,stopwords("spanish"))
#Eliminar los especios
textos=tm_map(textos,stripWhitespace)
#Eliminando Numeros
textos=tm_map(textos,removeNumbers)
texto1<-Corpus(as.character(textos[[1]]))
texto1<-Corpus(texto[[1]])
texto1<-Corpus(textos[[1]])
corpus_textos<-Corpus(textos)
##################################### METODO2 ###############################################
path = "C:\Users\Rafae\Documents\CIERRE_SEMESTRE_S2\Textos"
##################################### METODO2 ###############################################
path = "\Users\Rafae\Documents\CIERRE_SEMESTRE_S2\Textos"
##################################### METODO2 ###############################################
path = ".CIERRE_SEMESTRE_S2\Textos"
##################################### METODO2 ###############################################
path = ".CIERRE_SEMESTRE_S2/Textos"
getwd()
setwd("C:/Users/Rafae/Documents/CIERRE_SEMESTRE_S2/Textos")
dir = DirSource(paste(path,"pos/",sep=""), encoding = "UTF-8")
##################################### METODO2 ###############################################
path = "C:/Users/Rafae/Documents/CIERRE_SEMESTRE_S2/Textos"
setwd("C:/Users/Rafae/Documents/CIERRE_SEMESTRE_S2/Textos")
dir = DirSource(paste(path,"pos/",sep=""), encoding = "UTF-8")
##################################### METODO2 ###############################################
path = "C:/Users/Rafae/Documents/CIERRE_SEMESTRE_S2"
setwd("C:/Users/Rafae/Documents/CIERRE_SEMESTRE_S2")
dir = DirSource(paste(path,"pos/",sep=""), encoding = "UTF-8")
textos[[1]])
#Reconocimiento de Archivos
textos=VCorpus(DirSource("Textos",encoding="UTF-8"),readerControl =list(language="spa"))
inspect(textos)
#Colocando en formato de tabla
tdm<-TermDocumentMatrix(textos)
tdm
#Colocando en formato de tabla
tdm<-TermDocumentMatrix(textos,
stemming=T)
#Colocando en formato de tabla
tdm<-TermDocumentMatrix(textos)
matrix_tdm<-melt(as.matrix(tdm),value.name="Count")
library(ggplot2)
library(reshape2)
matrix_tdm<-melt(as.matrix(tdm),value.name="Count")
head(matrix_tdm)
tdm
textos
head(matrix_tdm)
#Reconocimiento de Archivos
textos=VCorpus(DirSource("Textos",encoding="UTF-8"),readerControl =list(language="spa"))
inspect(textos)
writeLines(as.character(textos[[1]]))
writeLines(as.character(textos[[2]]))
#Arreglando los textos
textos=tm_map(textos,tolower)
#Eliminando signos de puntuacion
textos=tm_map(textos,removePunctuation)
#Eliminando conectores
textos=tm_map(textos,removeWords,stopwords("spanish"))
#Eliminar los especios
textos=tm_map(textos,stripWhitespace)
#Eliminando Numeros
textos=tm_map(textos,removeNumbers)
#Colocando en formato de tabla
tdm<-TermDocumentMatrix(textos)
#Colocando en formato de tabla
tdm<-TermDocumentMatrix(textos)
rm(list=ls())
#Reconocimiento de Archivos
textos=VCorpus(DirSource("Textos",encoding="UTF-8"),readerControl =list(language="spa"))
inspect(textos)
#Colocando en formato de tabla
tdm<-TermDocumentMatrix(textos)
stopwords(spanish)
stopwords
control=list(stopwords=T,
#Colocando en formato de tabla
tdm<-TermDocumentMatrix(textos,
control=list(stopwords=T,
removePunctuation=T,
removeNumbers=T,
steming=T))
matrix_tdm<-melt(as.matrix(tdm),value.name="Count")
#Colocando en formato de tabla
tdm<-TermDocumentMatrix(textos,
control=list(stopwords=T,
removePunctuation=T,
removeNumbers=T,
steming=T))
matrix_tdm<-melt(as.matrix(tdm),value.name="Count")
head(matrix_tdm)
rm(list=ls())
#########################EJERCICIO 4 y 5 ####################################
##########################################################################
Cartas_Sacadas=sample(c("A",2:10,"J","Q","K"),31,replace=TRUE)
set.seed(31)
Cuenta<-0
for (i in 1:length(Cartas_Sacadas)){
if(Cartas_Sacadas[i]==2|Cartas_Sacadas[i]==3|Cartas_Sacadas[i]==4|Cartas_Sacadas[i]==5|Cartas_Sacadas[i]==6) {
Cuenta<-Cuenta+1 } else if (Cartas_Sacadas[i]=="A"|Cartas_Sacadas[i]=="J"|Cartas_Sacadas[i]=="Q"|Cartas_Sacadas[i]=="K"|Cartas_Sacadas[i]==10){
Cuenta<-Cuenta-1} else if (Cartas_Sacadas[i]==7|Cartas_Sacadas[i]==8|Cartas_Sacadas[i]==9){
Cuenta<-Cuenta+0
}
}
rm(list=ls())
#########################EJERCICIO 1 ####################################
##########################################################################
Ejemplos=sample(c("Positivo","Negativo","Neutros"),100,replace=TRUE)
#################Contando los Positivos################
n_positivos<-0
for (i in 1:length(Ejemplos)){
if("Positivo"==Ejemplos[i]){n_positivos<-n_positivos+1}
}
####################Contando los Negativos##############
n_negativos<-0
for (i in 1:length(Ejemplos)){
if("Negativo"==Ejemplos[i]){n_negativos<-n_negativos+1}
}
####################Contando los Neutros#################
n_neutros<-0
for (i in 1:length(Ejemplos)){
if("Neutros"==Ejemplos[i]){n_neutros<-n_neutros+1}
}
################Comprobando la sumatoria igual a 100################
TOTAL<-n_negativos+n_positivos+n_neutros
rm(list=ls())
#########################EJERCICIO 4 y 5 ####################################
##########################################################################
Cartas_Sacadas=sample(c("A",2:10,"J","Q","K"),31,replace=TRUE)
set.seed(31)
Cuenta<-0
#########################EJERCICIO 4 y 5 ####################################
##########################################################################
Cartas_Sacadas=sample(c("A",2:10,"J","Q","K"),5,replace=TRUE)
set.seed(31)
Cuenta<-0
for (i in 1:length(Cartas_Sacadas)){
if(Cartas_Sacadas[i]==2|Cartas_Sacadas[i]==3|Cartas_Sacadas[i]==4|Cartas_Sacadas[i]==5|Cartas_Sacadas[i]==6) {
Cuenta<-Cuenta+1 } else if (Cartas_Sacadas[i]=="A"|Cartas_Sacadas[i]=="J"|Cartas_Sacadas[i]=="Q"|Cartas_Sacadas[i]=="K"|Cartas_Sacadas[i]==10){
Cuenta<-Cuenta-1} else if (Cartas_Sacadas[i]==7|Cartas_Sacadas[i]==8|Cartas_Sacadas[i]==9){
Cuenta<-Cuenta+0
}
}
Cartas_Sacadas
#########################EJERCICIO 4 y 5 ####################################
##########################################################################
Cartas_Sacadas=sample(c("A",2:10,"J","Q","K"),31,replace=TRUE)
set.seed(31)
Cuenta<-0
for (i in 1:length(Cartas_Sacadas)){
if(Cartas_Sacadas[i]==2|Cartas_Sacadas[i]==3|Cartas_Sacadas[i]==4|Cartas_Sacadas[i]==5|Cartas_Sacadas[i]==6) {
Cuenta<-Cuenta+1 } else if (Cartas_Sacadas[i]=="A"|Cartas_Sacadas[i]=="J"|Cartas_Sacadas[i]=="Q"|Cartas_Sacadas[i]=="K"|Cartas_Sacadas[i]==10){
Cuenta<-Cuenta-1} else if (Cartas_Sacadas[i]==7|Cartas_Sacadas[i]==8|Cartas_Sacadas[i]==9){
Cuenta<-Cuenta+0
}
}
set.seed(31)
#########################EJERCICIO 4 y 5 ####################################
##########################################################################
Cartas_Sacadas=sample(c("A",2:10,"J","Q","K"),31,replace=TRUE)
Cuenta<-0
for (i in 1:length(Cartas_Sacadas)){
if(Cartas_Sacadas[i]==2|Cartas_Sacadas[i]==3|Cartas_Sacadas[i]==4|Cartas_Sacadas[i]==5|Cartas_Sacadas[i]==6) {
Cuenta<-Cuenta+1 } else if (Cartas_Sacadas[i]=="A"|Cartas_Sacadas[i]=="J"|Cartas_Sacadas[i]=="Q"|Cartas_Sacadas[i]=="K"|Cartas_Sacadas[i]==10){
Cuenta<-Cuenta-1} else if (Cartas_Sacadas[i]==7|Cartas_Sacadas[i]==8|Cartas_Sacadas[i]==9){
Cuenta<-Cuenta+0
}
}
Cartas_Sacadas
Cartas_Sacadas
set.seed(31)
#########################EJERCICIO 4 y 5 ####################################
##########################################################################
Cartas_Sacadas=sample(c("A",2:10,"J","Q","K"),31,replace=TRUE)
Cartas_Sacadas
set.seed(66)
#########################EJERCICIO 4 y 5 ####################################
##########################################################################
Cartas_Sacadas=sample(c("A",2:10,"J","Q","K"),31,replace=TRUE)
set.seed(66)
Cuenta<-0
for (i in 1:length(Cartas_Sacadas)){
if(Cartas_Sacadas[i]==2|Cartas_Sacadas[i]==3|Cartas_Sacadas[i]==4|Cartas_Sacadas[i]==5|Cartas_Sacadas[i]==6) {
Cuenta<-Cuenta+1 } else if (Cartas_Sacadas[i]=="A"|Cartas_Sacadas[i]=="J"|Cartas_Sacadas[i]=="Q"|Cartas_Sacadas[i]=="K"|Cartas_Sacadas[i]==10){
Cuenta<-Cuenta-1} else if (Cartas_Sacadas[i]==7|Cartas_Sacadas[i]==8|Cartas_Sacadas[i]==9){
Cuenta<-Cuenta+0
}
}
set.seed(3)
set.seed(31)
Cuenta<-0
for (i in 1:length(Cartas_Sacadas)){
if(Cartas_Sacadas[i]==2|Cartas_Sacadas[i]==3|Cartas_Sacadas[i]==4|Cartas_Sacadas[i]==5|Cartas_Sacadas[i]==6) {
Cuenta<-Cuenta+1 } else if (Cartas_Sacadas[i]=="A"|Cartas_Sacadas[i]=="J"|Cartas_Sacadas[i]=="Q"|Cartas_Sacadas[i]=="K"|Cartas_Sacadas[i]==10){
Cuenta<-Cuenta-1} else if (Cartas_Sacadas[i]==7|Cartas_Sacadas[i]==8|Cartas_Sacadas[i]==9){
Cuenta<-Cuenta+0
}
}
#########################EJERCICIO 4 y 5 ####################################
##########################################################################
Cartas_Sacadas=sample(c("A",2:10,"J","Q","K"),31,replace=TRUE)
set.seed(16)
Cuenta<-0
for (i in 1:length(Cartas_Sacadas)){
if(Cartas_Sacadas[i]==2|Cartas_Sacadas[i]==3|Cartas_Sacadas[i]==4|Cartas_Sacadas[i]==5|Cartas_Sacadas[i]==6) {
Cuenta<-Cuenta+1 } else if (Cartas_Sacadas[i]=="A"|Cartas_Sacadas[i]=="J"|Cartas_Sacadas[i]=="Q"|Cartas_Sacadas[i]=="K"|Cartas_Sacadas[i]==10){
Cuenta<-Cuenta-1} else if (Cartas_Sacadas[i]==7|Cartas_Sacadas[i]==8|Cartas_Sacadas[i]==9){
Cuenta<-Cuenta+0
}
}
set.seed(16)
#########################EJERCICIO 4 y 5 ####################################
##########################################################################
Cartas_Sacadas=sample(c("A",2:10,"J","Q","K"),31,replace=TRUE)
set.seed(16)
Cuenta<-0
for (i in 1:length(Cartas_Sacadas)){
if(Cartas_Sacadas[i]==2|Cartas_Sacadas[i]==3|Cartas_Sacadas[i]==4|Cartas_Sacadas[i]==5|Cartas_Sacadas[i]==6) {
Cuenta<-Cuenta+1 } else if (Cartas_Sacadas[i]=="A"|Cartas_Sacadas[i]=="J"|Cartas_Sacadas[i]=="Q"|Cartas_Sacadas[i]=="K"|Cartas_Sacadas[i]==10){
Cuenta<-Cuenta-1} else if (Cartas_Sacadas[i]==7|Cartas_Sacadas[i]==8|Cartas_Sacadas[i]==9){
Cuenta<-Cuenta+0
}
}
set.seed(31)
#########################EJERCICIO 4 y 5 ####################################
##########################################################################
Cartas_Sacadas=sample(c("A",2:10,"J","Q","K"),31,replace=TRUE)
set.seed(31)
Cuenta<-0
for (i in 1:length(Cartas_Sacadas)){
if(Cartas_Sacadas[i]==2|Cartas_Sacadas[i]==3|Cartas_Sacadas[i]==4|Cartas_Sacadas[i]==5|Cartas_Sacadas[i]==6) {
Cuenta<-Cuenta+1 } else if (Cartas_Sacadas[i]=="A"|Cartas_Sacadas[i]=="J"|Cartas_Sacadas[i]=="Q"|Cartas_Sacadas[i]=="K"|Cartas_Sacadas[i]==10){
Cuenta<-Cuenta-1} else if (Cartas_Sacadas[i]==7|Cartas_Sacadas[i]==8|Cartas_Sacadas[i]==9){
Cuenta<-Cuenta+0
}
}
menos1<-c(1,10:13)
neutros<-c(7:9)
cuenta<-0
variable<-mas1
# Ahora lo realice con 2 ford de manera variable.
mas1<-c(2:6)
menos1<-c(1,10:13)
neutros<-c(7:9)
cuenta<-0
variable<-mas1
Cartas_Sacadas=sample(c("A",2:10,"J","Q","K"),31,replace=TRUE)
set.seed(31)
# Ahora lo realice con 2 ford de manera variable.
mas1<-c(2:6)
menos1<-c(1,10:13)
neutros<-c(7:9)
cuenta<-0
variable<-mas1
for (i in 1:length(Cartas_Sacadas)){ for (n in 1:length(variable)){
if(Cartas_Sacadas[i]==mas1[n]){cuenta<-cuenta+1}}
variable<-menos1
for(n in 1:length(variable)){
if(Cartas_Sacadas[i]==menos1[n]){cuenta<-cuenta-1}
}
}
rm(list=ls())
#########################EJERCICIO 4 y 5 ####################################
##########################################################################
Cartas_Sacadas=sample(c("A",2:10,"J","Q","K"),31,replace=TRUE)
set.seed(31)
Cuenta<-0
for (i in 1:length(Cartas_Sacadas)){
if(Cartas_Sacadas[i]==2|Cartas_Sacadas[i]==3|Cartas_Sacadas[i]==4|Cartas_Sacadas[i]==5|Cartas_Sacadas[i]==6) {
Cuenta<-Cuenta+1 } else if (Cartas_Sacadas[i]=="A"|Cartas_Sacadas[i]=="J"|Cartas_Sacadas[i]=="Q"|Cartas_Sacadas[i]=="K"|Cartas_Sacadas[i]==10){
Cuenta<-Cuenta-1} else if (Cartas_Sacadas[i]==7|Cartas_Sacadas[i]==8|Cartas_Sacadas[i]==9){
Cuenta<-Cuenta+0
}
}
# Ahora lo realice con 2 ford de manera variable.
mas1<-c(2:6)
menos1<-c(1,10:13)
neutros<-c(7:9)
cuenta<-0
variable<-mas1
cuenta<-0
variable<-mas1
for (i in 1:length(Cartas_Sacadas)){ for (n in 1:length(variable)){
if(Cartas_Sacadas[i]==mas1[n]){cuenta<-cuenta+1}}
variable<-menos1
for(n in 1:length(variable)){
if(Cartas_Sacadas[i]==menos1[n]){cuenta<-cuenta-1}
}
}
cuenta<-0
variable<-mas1
for (i in 1:length(Cartas_Sacadas)){ for (n in 1:length(variable)){
if(Cartas_Sacadas[i]==mas1[n]){cuenta<-cuenta+1}}
variable<-menos1
for(n in 1:length(variable)){
if(Cartas_Sacadas[i]==menos1[n]){cuenta<-cuenta-1}
}
}
menos1<-c("A","J","Q","K",10)
neutros<-c(7:9)
# Ahora lo realice con 2 ford de manera variable.
mas1<-c(2:6)
menos1<-c("A","J","Q","K",10)
neutros<-c(7:9)
cuenta<-0
variable<-mas1
for (i in 1:length(Cartas_Sacadas)){ for (n in 1:length(variable)){
if(Cartas_Sacadas[i]==mas1[n]){cuenta<-cuenta+1}}
variable<-menos1
for(n in 1:length(variable)){
if(Cartas_Sacadas[i]==menos1[n]){cuenta<-cuenta-1}
}
}
